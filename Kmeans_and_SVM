import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import pandas as pd
import sklearn as sk
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import random
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
from scipy import optimize
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import silhouette_score
from sklearn import metrics
from sklearn.svm import SVC

def noises(delta_t1,E):
    E = E*0.00001
    datasets = []
    for i in range(100):
        noise = np.random.normal(0, 1, len(delta_t1))*E
        delta_t1_noisy = delta_t1+noise
        datasets.append(delta_t1_noisy)
    return datasets

sil_scores =[]
for E in range (1000):
  noisysteel = noises(steel,E)
  noisybrass = noises(brass,E)
  noisyconcrete = noises(concrete,E)
  noisylead = noises(lead,E)
  df = (pd.DataFrame(np.array(noisysteel + noisybrass + noisyconcrete + noisylead))).dropna(axis=1)
  df['label'] = ''
  X = df.drop('label', axis=1)

  kmeans = KMeans(n_clusters=4)
  kmeans.fit(X)

  y_pred = kmeans.predict(X)
  y_pred = y_pred.astype(str)

  sil_score = silhouette_score(X, y_pred)
  sil_scores.append(sil_score)

axis1 = np.linspace(0.00001, (1000*0.00001), num=1000)
plt.plot(axis1, sil_scores)
plt.xlabel('E value (proportional to error)')
plt.ylabel('Silhouette score')
plt.title('The silhouette scores from running kmeans for different values of E')
plt.show()


accuracy_scores = []
for E in range (1000):
  noisysteel = noises(steel,E)
  noisybrass = noises(brass,E)
  noisyconcrete = noises(concrete,E)
  noisylead = noises(lead,E)
  df = (pd.DataFrame(np.array(noisysteel + noisybrass + noisyconcrete + noisylead))).dropna(axis=1)
  df['label'] = ''
  df.loc[:len(noisysteel)-1, 'label'] = '0'
  df.loc[len(noisysteel):len(noisysteel) + len(noisybrass) - 1, 'label'] = '1'
  df.loc[len(noisysteel) + len(noisybrass):len(noisysteel) + len(noisybrass) + len(noisyconcrete) - 1, 'label'] = '2'
  df.loc[len(noisysteel) + len(noisybrass) + len(noisyconcrete):, 'label'] = '3'
  df['label'] = df['label'].astype(int)

  X_train, X_test, y_train, y_test = train_test_split(df.drop('label', axis=1), df['label'], test_size=0.2, random_state=15)
  clf = SVC(kernel='rbf')
  clf.fit(X_train, y_train)
  y_pred = clf.predict(X_test)
  accuracy = accuracy_score(y_test, y_pred)
  accuracy_scores.append(accuracy)

axis1 = np.linspace(0.00001, (1000*0.00001), num=1000)
plt.plot(axis1, accuracy_scores)
plt.xlabel('E value (proportional to error)')
plt.ylabel('Accuracy')
plt.title('The accuarcy of the SVC for different values of E')
plt.show()